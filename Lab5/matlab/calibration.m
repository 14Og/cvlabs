% Auto-generated by cameraCalibrator app on 30-Mar-2025
%-------------------------------------------------------


% Define images to process
imageFileNames = {'/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/1.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/11.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/16.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/17.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/2.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/21.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/23.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/26.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/27.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/29.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/4.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/6.jpg',...
    '/home/nikolai/code/study/cvlabs/Media/Lab5/Matlab/7.jpg',...
    };
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
% h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
% h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
% displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
% undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample');
print(cameraParams);